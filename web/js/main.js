"use strict";!function(s){var n=s("#accent .counter"),t=s(".accordion"),i=s("body"),a=s("[data-block-toggle]"),o=s(".btn-tooltip"),e=s("[data-btn-filter-not-active]"),l=s(".chart"),r=s(".chat"),c=r.find(".chat__body"),d=s(".card-body.overflow-y-auto"),h=s(".counter"),f=s('[data-fancybox="gallery"]'),u=s(".form-control-file"),p=s(".input-nao__field"),g=s("[data-inputmask-tel]"),m=s("[data-inputmask-bDay]"),v=s("[data-inputmask-email]"),b=s("[data-input-for-block-toggle]"),C=s(".letter-icon"),k=s("[data-radio-hide]"),w=s("[data-radio-like]"),x=s(".js-range-slider"),_=s(".js-range-slider-single"),y=s(".js-range-slider-single-link"),S=s(".js-range-slider-single-input"),T=s(".js-range-slider-input-start"),D=s(".js-range-slider-input-end"),F=s("#range-calendar"),M=s("[data-rating]"),H=s("[data-rating-output]"),I=s(".sec-main"),L=s(".select"),j=s(".slider-for"),O=s(".slider-nav"),A=s(".slider-order"),B=s(".sticky"),R=s("[data-sticky-breadcrumbs]"),W=s("[data-sticky-tab-bar]"),P=s(".switch.switch-sm"),z=s("[data-switcher-nav-input]"),U=s("[data-switcher-input-toggle]"),E=s("[data-timer-display]"),N=s(".tooltip"),Y='<svg version="1.1" id="Слой_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n                viewBox="0 0 512 491.5" style="enable-background:new 0 0 512 491.5;" xml:space="preserve">\n                <path class="st0" d="M268.1,9.4l65.1,154.1L500,177.9c11.6,1,16.3,15.4,7.5,23L381,310.5l37.9,163c2.6,11.3-9.6,20.2-19.6,14.2\n                \t\t\tL256,401.3l-143.3,86.4c-10,6-22.2-2.9-19.6-14.2l37.9-163L4.5,200.9c-8.8-7.6-4.1-22,7.5-23l166.7-14.3L243.9,9.4\n                \t\t\tC248.4-1.3,263.6-1.3,268.1,9.4L268.1,9.4z"/></svg>';if(s(window).on("load",function(){s(".preloader").removeClass("loading"),p.each(function(t,e){""!==s(e).val()?s(e).addClass("input-nao__filled"):s(e).removeClass("input-nao__filled")}),s("input").attr("autocomplete","false"),s("form").attr("autocomplete","off")}),s(window).on("scroll",function(t){var e=s(window).scrollTop();B.length&&(0<e?B.addClass("fixed"):B.removeClass("fixed"))}),d.length){n.find(".counter__circle-value");var Q,Z=n.find(".counter__output"),$=parseInt(d.css("padding-top")),q=parseInt(d.css("padding-Bottom")),G=d.find(".container").prop("clientHeight")-d.prop("clientHeight")+$+q,J=0;d.on("scroll",function(t){var e=d.scrollTop();((Q=+(Q=e/G*100).toFixed(0))===J||J<Q)&&(J=Q,Z.text(J)),G<=e&&(a.find("button").removeAttr("disabled"),s(".tick").removeClass("tick-hidden"))})}if(I.length){s.scrollAnimate=function(t,e){var n=s.extend({scrollDown:function(){},scrollUp:function(){}},t),i=0,a=e.prop("scrollHeight")-e.prop("scrollTop")-e.prop("clientHeight")-8;e.on("scroll",function(){var t=s(this).scrollTop();0===t?n.scrollUp():a<=t&&a?n.scrollDown():i<t&&t-i<5?n.scrollDown():t<i&&t-i<-5&&n.scrollUp(),i=t})};var K=kt(function(){xt(W,"sticky-tab-bar"),xt(R,"sticky-breadcrumbs")},2e3),V=kt(function(){_t(W,"sticky-tab-bar"),_t(R,"sticky-breadcrumbs")},2e3);s.scrollAnimate({scrollDown:K,scrollUp:V},I)}if(r.length){var X=c.find(".container").prop("clientHeight");c.scrollTop(X)}if(e.length){var tt=s(".list-item-not-active"),et="Посмотреть новые",nt="Посмотреть все";e.on("click",function(){var t=s(this);t.hasClass("toggle")?(tt.fadeIn(),t.removeClass("toggle").find("[data-text-toggle]").text(et)):(tt.fadeOut(),t.addClass("toggle").find("[data-text-toggle]").text(nt))})}if(g.length&&g.inputmask({mask:"+7 (999) 999-99-99"}),v.length&&v.inputmask({mask:"*{1,20}@*{1,20}[.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(t){return(t=t.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",casing:"lower"}}}),m.length&&m.inputmask({alias:"datetime",inputFormat:"dd/mm/yyyy"}),z.length&&U.length&&z.on("change",function(){var i=s(this),a=i.data("switcher-nav-input");U.each(function(t,e){var n=s(e).data("switcher-input-toggle");i.is(":checked")?a===n&&s(e).removeAttr("disabled"):a===n&&s(e).attr("disabled","disabled")})}),N.length&&o.length){var it=function(t){t.next(".tooltip").hasClass("open")?N.removeClass("open"):(N.removeClass("open"),t.next(".tooltip").addClass("open"),t.next(".tooltip-fade")&&setTimeout(function(){t.next(".tooltip-fade").removeClass("open")},4e3))};o.on("click",function(t){var e=s(this),n=s(t.target);if("a"===this.tagName.toLowerCase()&&t.preventDefault(),n.hasClass("btn-tooltip"))it(e);else for(;n!==e;){if(n.hasClass("btn-tooltip"))return it(e),!1;n=n.parent()}}),s(document).on("click",function(n){N.hasClass("open")&&N.each(function(t,e){s(e).is(n.target)||0!==N.has(n.target).length||0!==o.has(n.target).length||o.is(n.target)||s(e).removeClass("open")})})}if(f.length&&f.fancybox({opacity:!0,loop:!1}),k.length&&k.on("click",function(){s(this).closest(".list-item").fadeOut(function(){s(this).remove()})}),w.length&&w.on("click",function(t){var e=s(this).closest(".list-item");s(this).toggleClass("active"),M.length&&M.rateYo({rating:0,starWidth:"32px",normalFill:"#bab2bf",ratedFill:"#5e3080",spacing:"0",numStars:5,precision:0,starSvg:Y,onInit:function(){},onSet:function(t){console.log("event onSet: rating",t),e.fadeOut(function(){s(this).remove()})},onChange:function(){}})}),H.length&&H.rateYo({rating:3.3,starWidth:"24px",normalFill:"#bab2bf",ratedFill:"#5e3080",spacing:"0",numStars:5,precision:1,starSvg:Y,onInit:function(){},onSet:function(t){console.log("event onSet: rating",t)},onChange:function(){}}),h.length&&h.each(function(t,e){var n=s(e).find(".counter__circle-value");setTimeout(function(){n.attr("stroke-dashoffset",0)},500),s(e).find(".counter__output").each(function(){s(this).prop("Counter",0).animate({Counter:s(this).text()},{duration:1500,easing:"swing",step:function(t){s(this).text(Math.ceil(t))}})})}),Ct.length&&Ct(),F.length){var at=moment(),ot=moment().add("months",12);F.rangeCalendar({lang:"ru",theme:"default-theme",themeContext:this,startDate:at,endDate:ot,start:"+7",startRangeWidth:1,minRangeWidth:1,maxRangeWidth:1,weekends:!0,autoHideMonths:!1,visible:!0,trigger:"click",changeRangeCallback:function(t,e){return console.log("target: ",t,"range: ",e),!1}})}if(x.length&&x.ionRangeSlider({type:"double",min:0,max:24,from:13,to:18,step:1,postfix:".00",skin:"round",hide_min_max:!0,hide_min_to:!0,onFinish:function(t){var e=T,n=D,i=t.from,a=t.to;i<10?e.text("0"+i+".00"):e.text(i+".00"),a<10?n.text("0"+a+".00"):n.text(a+".00")}}),_.length&&(_.ionRangeSlider({min:0,max:24,from:13,step:1,postfix:".00",skin:"round",hide_min_max:!0,hide_min_to:!0,onChange:function(t){var e=s(".js-range-slider-single-input.active"),n=t.from;n<10?e.text("0"+n+".00"):e.text(n+".00")}}),S.hasClass("active")||S.first().addClass("active"),y.on("click",function(t){t.preventDefault(),S.removeClass("active"),s(this).find(".js-range-slider-single-input").addClass("active")})),p.length&&p.on("focus blur input",function(){""!==s(this).val()?s(this).addClass("input-nao__filled"):s(this).removeClass("input-nao__filled")}),a.length&&b.length&&!u.length&&b.on("input",function(){0<s(".input-nao__field").filter(function(){return""!==s(this).val()&&"0"!==s(this).val()}).length?a.find("button[type=submit]").removeAttr("disabled"):a.find("button[type=submit]").attr("disabled","disabled")}),a.length&&b.length&&u.length&&b.on("input",function(){var t=s(".input-nao__field").filter(function(){return""!==s(this).val()&&"0"!==s(this).val()}),e=u.find(".form-control-file__item");0<t.length&&e.length?a.find("button[type=submit]").removeAttr("disabled"):a.find("button[type=submit]").attr("disabled","disabled")}),l.length&&Highcharts.chart("chart",{chart:{plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1,type:"pie",margin:[0,0,0,0],spacing:[0,0,0,0]},title:{text:""},tooltip:{padding:4,distance:24,pointFormat:"{series.name}: <b>{point.percentage:.1f}%</b>"},plotOptions:{pie:{allowPointSelect:!0,cursor:"pointer",dataLabels:{enabled:!1},showInLegend:!1,animation:{duration:500},slicedOffset:4},series:{states:{inactive:{opacity:1},hover:{enabled:!0,halo:{opacity:.5,size:4}},select:{enabled:!0,halo:{opacity:.5,size:4}}}}},credits:{enabled:!1},series:[{name:"Brands",colorByPoint:!0,data:[{name:"Chrome",y:61.41,sliced:!1,selected:!1},{name:"Internet Explorer",y:11.84},{name:"Firefox",y:10.85},{name:"Edge",y:4.67},{name:"Safari",y:4.18},{name:"Other",y:7.05}]}]}),P.length){var st=P.find("input[type=checkbox]"),lt=st.prop("checked"),rt=s("#counters");lt&&wt(rt,"show"),st.on("change",function(){lt=st.prop("checked"),wt(rt,lt?"show":"hide")})}function ct(t,e,n){t.find(e).each(function(t,e){s(e).addClass(n)})}function dt(t,e,n){t.find(e).each(function(t,e){s(e).removeClass(n)})}function ht(t,e){ct(s(this).find(".slick-slide.slick-active"),"[data-aos^=fade]","aos-animate")}function ft(t,e,n){var i=s(this).find(".slick-slide.slick-active"),a=i.next(),o=i.prev();dt(a,"[data-aos^=fade]","aos-animate"),dt(o,"[data-aos^=fade]","aos-animate")}function ut(t,e,n,i){dt(s(this).find(".slick-slide"),"[data-aos^=fade]","aos-animate")}function pt(t,e,n){ct(s(this).find(".slick-slide.slick-active"),"[data-aos^=fade]","aos-animate")}if(L&&L.on("click",".select__placeholder",function(){var t=s(this).closest(".select");t.hasClass("is-open")?t.removeClass("is-open"):(t.addClass("is-open"),s(".select.is-open").not(t).removeClass("is-open"))}).on("click",".select__list > li",function(){var t=s(this).closest(".select"),e=s(this);t.removeClass("is-open").find(".select__placeholder").text(s(this).text()),s(".select__list > li").removeClass("selected"),e.addClass("selected")}),A.length&&(A.on("init",ht),A.slick({adaptiveHeight:!0,arrows:!1,centerMode:!1,dots:!1,focusOnSelect:!0,swipe:!0,swipeToSlide:!0,infinite:!0,centerPadding:"40px",slidesToShow:1,slidesToScroll:1}).on("swipe",ft).on("beforeChange",ut).on("afterChange",pt)),j.length&&O.length&&(j.on("init",ht),j.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,asNavFor:".slider-nav",adaptiveHeight:!1,infinite:!0}).on("swipe",ft).on("beforeChange",ut).on("afterChange",pt),O.slick({adaptiveHeight:!1,arrows:!1,centerMode:!1,dots:!1,focusOnSelect:!0,swipe:!0,swipeToSlide:!0,infinite:!0,centerPadding:"40px",slidesToShow:5,slidesToScroll:1,asNavFor:".slider-for",responsive:[{breakpoint:414,settings:{slidesToShow:4}},{breakpoint:374,settings:{slidesToShow:3}}]})),E.length){var gt=bt,mt=bt,vt=bt;gt(s('[data-timer-display="1"]'),1,gt),mt(s('[data-timer-display="2"]'),120,mt),vt(s('[data-timer-display="3"]'),73,vt)}function bt(o,t,n){function i(t){var e=(Math.floor(t/3600)<10?"0":"")+Math.floor(t/3600),n=(Math.floor(t/60)%60<10?"0":"")+Math.floor(t/60)%60,i=t%60,a="".concat(e,":").concat(n,":").concat(i<10?"0":"").concat(i);o.text(a)}!function(t){clearInterval(n);var e=Date.now()+1e3*t;i(t),n=setInterval(function(){var t=Math.round((e-Date.now())/1e3);t<0?clearInterval(n):i(t)},1e3)}(60*t)}function Ct(){var t=n.find(".counter__circle-value"),e=n.find(".counter__output");setTimeout(function(){t.attr("stroke-dashoffset",0)},500),e.prop("Counter",0).animate({Counter:s(this).text()},{duration:1500,easing:"swing",step:function(t){s(this).text(Math.ceil(t))}})}function kt(t,e){var n=!1;return function(){n||(t.apply(this,arguments),n=!0,setTimeout(function(){return n=!1},e))}}function wt(t,e,n){t.animate({opacity:e,height:e},{duration:n||500,specialEasing:{opacity:"linear",height:"swing"}})}function xt(t,e){t.length&&i.addClass(e)}function _t(t,e){t.length&&i.removeClass(e)}t.length&&(t.addClass("hidden").find(".accordion__body").hide(),t.on("click",".accordion__header",function(){var t=s(this).closest(".accordion"),e=t.find(".accordion__body");t.hasClass("hidden")?(t.removeClass("hidden"),wt(e,"show",250)):(t.addClass("hidden"),wt(e,"hide",250))})),C.length&&C.on("click",function(){var t=s(this);t.hasClass("opened")||t.addClass("opened")}),svg4everybody()}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
